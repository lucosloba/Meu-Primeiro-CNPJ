from fastapi import FastAPI, Request, BackgroundTasks, HTTPException
from fastapi.responses import PlainTextResponse
from db import Aluno as AlunoDB, HistoricoConversa, SessionLocal
from datetime import datetime
import openai
import os
import logging
from contextlib import contextmanager
from sqlalchemy.exc import SQLAlchemyError

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Configura√ß√£o da API OpenAI
openai.api_key = os.environ.get("OPENAI_API_KEY", "sua_api_key_aqui")

app = FastAPI()


@contextmanager
def get_db_session():
    """Context manager para sess√µes do banco de dados"""
    session = SessionLocal()
    try:
        yield session
    finally:
        session.close()


def extract_name(text):
    """Extrai o primeiro nome de um texto usando a API OpenAI"""
    try:
        prompt_nome = f"Extraia apenas o primeiro nome da seguinte frase: '{text}'. Responda apenas com o nome, sem pontua√ß√£o ou informa√ß√µes adicionais."
        resposta_nome = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt_nome}],
            temperature=0,
            max_tokens=50,
        )
        nome_extraido = resposta_nome.choices[0].message["content"].strip()
        return nome_extraido
    except Exception as e:
        logger.error(f"Erro ao extrair nome: {e}")
        # Tenta extrair o nome usando l√≥gica simples
        words = text.split()
        if len(words) >= 1:
            # Tenta remover prefixos comuns
            if words[0].lower() in ["meu", "eu", "sou", "o", "a"]:
                return words[1] if len(words) > 1 else text
            return words[0]
        return text


def save_message(session, aluno_id, remetente, mensagem):
    """Salva uma mensagem no hist√≥rico de conversas"""
    try:
        historico = HistoricoConversa(
            aluno_id=aluno_id,
            remetente=remetente,
            mensagem=mensagem,
            timestamp=datetime.now().isoformat(),
        )
        session.add(historico)
        session.commit()
        return True
    except SQLAlchemyError as e:
        logger.error(f"Erro ao salvar mensagem: {e}")
        session.rollback()
        return False


def get_course_content(etapa):
    """Retorna o conte√∫do do curso para a etapa atual"""
    conteudos = {
        "modulo_pdf_1_1": {
            "texto": "Parte 1: O que √© empreendedorismo? üöÄ\n\nEmpreendedorismo √© o processo de identificar oportunidades e transform√°-las em neg√≥cios vi√°veis. Um empreendedor √© algu√©m que cria algo novo, assume riscos calculados e busca inova√ß√£o.",
            "proxima": "modulo_pdf_1_2",
        },
        "modulo_pdf_1_2": {
            "texto": "Parte 2: Caracter√≠sticas de um empreendedor de sucesso.\n\nUm empreendedor de sucesso geralmente apresenta: vis√£o de futuro, capacidade de assumir riscos, criatividade, persist√™ncia, lideran√ßa e adaptabilidade.",
            "proxima": "modulo_pdf_1_3",
        },
        "modulo_pdf_1_3": {
            "texto": "Parte 3: Import√¢ncia do empreendedorismo para a sociedade.\n\nO empreendedorismo impulsiona a economia, gera empregos, promove inova√ß√£o e contribui para o desenvolvimento social e econ√¥mico.",
            "proxima": "modulo_pdf_1_4",
        },
        "modulo_pdf_1_4": {
            "texto": "Final do m√≥dulo 1! Pronto para o quiz? Digite *quiz* para come√ßar!",
            "proxima": "quiz_modulo_1",
        },
        "quiz_modulo_1": {
            "texto": "Pergunta 1: Qual √© a principal caracter√≠stica de um empreendedor?\nA) Medo de riscos\nB) Avers√£o a mudan√ßas\nC) Vis√£o de oportunidade\nD) Prefer√™ncia por estabilidade",
            "proxima": "quiz_modulo_1_2",
        },
    }
    return conteudos.get(
        etapa, {"texto": "Conte√∫do n√£o encontrado", "proxima": "pronto"}
    )


@app.post("/webhook")
async def webhook(request: Request, background_tasks: BackgroundTasks):
    try:
        form = await request.form()
        incoming_msg = form.get("Body", "").strip()
        sender = form.get("From", "")

        if not sender or not incoming_msg:
            logger.warning("Mensagem ou remetente vazios")
            return PlainTextResponse("N√£o foi poss√≠vel processar a mensagem.")

        logger.info(f"Mensagem recebida de {sender}: {incoming_msg}")

        with get_db_session() as session:
            # Buscar ou criar aluno
            aluno_db = session.query(AlunoDB).filter_by(numero_whatsapp=sender).first()
            if not aluno_db:
                logger.info(f"Criando novo aluno para {sender}")
                aluno_db = AlunoDB(
                    numero_whatsapp=sender, etapa="inicio", perfil={}, pontuacao=0
                )
                session.add(aluno_db)
                session.commit()

            # Estrutura do aluno
            aluno = {
                "etapa": aluno_db.etapa,
                "profile": aluno_db.perfil or {},
                "pontuacao": aluno_db.pontuacao or 0,
            }

            # Salvar mensagem do aluno
            save_message(session, aluno_db.id, "aluno", incoming_msg)

            # L√≥gica de processamento por etapa
            resposta = ""

            # In√≠cio do curso e coleta de perfil
            if aluno["etapa"] == "inicio":
                aluno["etapa"] = "perfil_nome"
                resposta = "Ol√°! Sou o Pjotinha, seu instrutor no curso Meu Primeiro CNPJ! Qual o seu nome?"

            elif aluno["etapa"] == "perfil_nome":
                nome_extraido = extract_name(incoming_msg)
                aluno["profile"]["nome"] = nome_extraido
                aluno["etapa"] = "perfil_curso"
                resposta = f"Prazer em te conhecer, {nome_extraido}! Qual o seu curso?"

            elif aluno["etapa"] == "perfil_curso":
                aluno["profile"]["curso"] = incoming_msg
                aluno["etapa"] = "perfil_semestre"
                resposta = "Qual semestre voc√™ est√° atualmente?"

            elif aluno["etapa"] == "perfil_semestre":
                aluno["profile"]["semestre"] = incoming_msg
                aluno["etapa"] = "perfil_interesses"
                resposta = "Quais s√£o seus interesses no empreendedorismo?"

            elif aluno["etapa"] == "perfil_interesses":
                aluno["profile"]["interesses"] = incoming_msg
                aluno["etapa"] = "pronto"
                resposta = f"Prazer em te conhecer, {aluno['profile'].get('nome', 'aluno')}! Est√° pronto para come√ßar? Digite *continuar* para iniciar!"

            # L√≥gica do curso
            elif aluno["etapa"] == "pronto" and "continuar" in incoming_msg.lower():
                aluno["etapa"] = "modulo_pdf_1_1"
                resposta = "√ìtimo! Vamos come√ßar com o primeiro m√≥dulo. Digite *continuar* para receber o conte√∫do."

            # M√≥dulos e quizzes
            elif (
                aluno["etapa"].startswith(("modulo_", "quiz_"))
                and "continuar" in incoming_msg.lower()
            ):
                conteudo = get_course_content(aluno["etapa"])
                resposta = conteudo["texto"] + "\n\nDigite *continuar* para avan√ßar."
                aluno["etapa"] = conteudo["proxima"]

            # Fallback para IA
            else:
                # Verificar se o usu√°rio quer avan√ßar independente da etapa
                if "continuar" in incoming_msg.lower() and aluno["etapa"].startswith(
                    ("modulo_", "quiz_", "pronto")
                ):
                    conteudo = get_course_content(aluno["etapa"])
                    resposta = (
                        conteudo["texto"] + "\n\nDigite *continuar* para avan√ßar."
                    )
                    aluno["etapa"] = conteudo["proxima"]
                else:
                    # Usar IA para responder
                    try:
                        historico_conversas = (
                            session.query(HistoricoConversa)
                            .filter_by(aluno_id=aluno_db.id)
                            .order_by(HistoricoConversa.timestamp)
                            .limit(
                                10
                            )  # Limitar hist√≥rico para evitar tokens excessivos
                            .all()
                        )

                        # Preparar contexto para a IA
                        perfil_info = f"Perfil do aluno: Nome: {aluno['profile'].get('nome', 'desconhecido')}, Curso: {aluno['profile'].get('curso', 'desconhecido')}, Semestre: {aluno['profile'].get('semestre', 'desconhecido')}, Interesses: {aluno['profile'].get('interesses', 'desconhecidos')}"

                        messages = [
                            {
                                "role": "system",
                                "content": f"Voc√™ √© o Pjotinha, um assistente educacional especialista em empreendedorismo que est√° ministrando o curso 'Meu Primeiro CNPJ'. {perfil_info}. Etapa atual: {aluno['etapa']}. Mantenha respostas curtas e objetivas, adequadas para WhatsApp.",
                            }
                        ]

                        # Adicionar hist√≥rico √† conversa
                        for conversa in historico_conversas:
                            role = (
                                "user" if conversa.remetente == "aluno" else "assistant"
                            )
                            messages.append(
                                {"role": role, "content": conversa.mensagem}
                            )

                        # Adicionar mensagem atual
                        messages.append({"role": "user", "content": incoming_msg})

                        # Chamar API
                        ai_response = openai.ChatCompletion.create(
                            model="gpt-3.5-turbo",
                            messages=messages,
                            temperature=0.7,
                            max_tokens=500,
                        )

                        resposta = ai_response.choices[0].message["content"].strip()

                    except Exception as e:
                        logger.error(f"Erro na resposta da IA: {e}")
                        resposta = "Desculpe, tive um problema t√©cnico. Pode perguntar novamente?"

            # Atualizar banco de dados
            try:
                aluno_db.etapa = aluno["etapa"]
                aluno_db.perfil = aluno["profile"]
                aluno_db.pontuacao = aluno["pontuacao"]
                session.commit()
                logger.info(f"Aluno atualizado: {aluno_db.id}, etapa: {aluno_db.etapa}")
            except SQLAlchemyError as e:
                logger.error(f"Erro ao atualizar aluno: {e}")
                session.rollback()

            # Salvar resposta no hist√≥rico
            background_tasks.add_task(
                save_message, session, aluno_db.id, "IA", resposta
            )

            return PlainTextResponse(resposta)

    except Exception as e:
        logger.error(f"Erro n√£o tratado: {e}", exc_info=True)
        return PlainTextResponse(
            "Desculpe, ocorreu um erro inesperado. Por favor, tente novamente mais tarde."
        )
